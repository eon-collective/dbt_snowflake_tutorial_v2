
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'jaffle_shop'
version: '1.4.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'snowflake-dwh'
# profile: 'default'

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

vars:
  refresh_type: MONTHLY
  env:
      'TEST'

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  jaffle_shop:
    staging:
      +materialized: view
    marts:
      +materialized: table
  
tests:
  +severity: error  # all tests


  #  specifying where the raw (sources) data is uploaded and where the dbt models are created
  dbt_artifacts:
    +schema: dbt_audit
    +materialized: view
    +on_schema_change: append_new_columns
    +full_refresh: null

on-run-end: "{{ dbt_readme_logger.log_results_csv() }}"

# on-run-end: "{{ dbt_artifacts.upload_results(results, include_information=true) }}"

# to display the package results in the logs in addition to storing them in the Data Warehouse
# on-run-end: "{{ dbt_project_evaluator.print_dbt_project_evaluator_issues() }}"
